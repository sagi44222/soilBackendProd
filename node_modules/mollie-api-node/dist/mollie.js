'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = _interopDefault(require('fs'));
var https = _interopDefault(require('https'));
var path = _interopDefault(require('path'));
var axios = _interopDefault(require('axios'));
var qs = _interopDefault(require('qs'));
var _toPlainObject = _interopDefault(require('lodash/toPlainObject'));
var omit = _interopDefault(require('lodash/omit'));

var cert = "dc70e60c16aaac11.pem";

var version = "2.0.0-rc.2";

/**
 * Create pre-configured httpClient instance
 * @private
 */
function createHttpClient() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.baseURL = 'https://api.mollie.com:443/v2/';

  options.headers = Object.assign({}, options.headers, {
    Authorization: 'Bearer ' + options.apiKey,
    'Accept-Encoding': 'gzip',
    'Content-Type': 'application/json',
    'User-Agent': 'node.js/' + process.version,
    'X-Mollie-User-Agent': 'mollie/' + version
  });

  options.httpsAgent = new https.Agent({
    cert: fs.readFileSync(path.resolve(__dirname, cert))
  });

  options.paramsSerializer = options.paramsSerializer || qs.stringify;

  return axios.create(options);
}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};



















var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

/**
 * A list helper class
 */
var List = function (_Array) {
  inherits(List, _Array);

  function List() {
    classCallCheck(this, List);

    var _this = possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this));

    _this.links = null;
    return _this;
  }

  return List;
}(Array);

/* eslint-disable new-cap */
/**
 * The base resource
 * @param {Object} httpClient
 * @private
 */

var Resource = function () {
  /**
   * Constructor
   * @param httpClient
   */
  function Resource(httpClient) {
    classCallCheck(this, Resource);

    this.httpClient = httpClient;
  }

  /**
   * Error handler
   * @param {*} response
   * @param {function} [cb]
   * @since 2.0.0
   * @private
   */


  createClass(Resource, [{
    key: 'getClient',


    /**
     * Get the API client
     * @returns {Object} httpClient
     * @since 2.0.0
     * @private
     */
    value: function getClient() {
      return this.httpClient;
    }

    /**
     * Set the parent ID by providing the parent
     * @param parent
     * @since 1.1.1
     * @deprecated
     */

  }, {
    key: 'withParent',
    value: function withParent(parent) {
      if (parent && parent.id) {
        this.setParentId(parent.id);
      }
      return this;
    }

    /**
     * Set the parent ID
     * @param {number} parentId
     * @since 2.0.0
     * @protected
     */

  }, {
    key: 'setParentId',
    value: function setParentId(parentId) {
      this.parentId = parentId;
    }

    /**
     * If the parent ID is set
     * @returns {boolean}
     * @since 2.0.0
     */

  }, {
    key: 'hasParentId',
    value: function hasParentId() {
      return !!this.parentId;
    }

    /**
     * Create a resource URL with the parent ID
     * @returns {string} resourceUrl
     * @since 2.0.0
     * @private
     */

  }, {
    key: 'getResourceUrl',
    value: function getResourceUrl() {
      if (this.constructor.resource.indexOf('_') !== -1) {
        var parts = this.constructor.resource.split('_');
        return parts[0] + '/' + this.parentId + '/' + parts[1];
      }

      return this.constructor.resource;
    }

    /**
     * Get the resource name from the resource identifier
     * @returns {string} resourceUrl
     * @since 2.0.0-rc.2
     * @private
     */

  }, {
    key: 'getResourceName',
    value: function getResourceName() {
      if (this.constructor.resource.includes('_')) {
        return this.constructor.resource.split('_')[1];
      }

      return this.constructor.resource;
    }

    /**
     * Create a resource by ID
     * @param {Object} [data]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.0.0
     */

  }, {
    key: 'create',
    value: function create(data, cb) {
      var _this = this;

      if (typeof data === 'function') {
        cb = data; // eslint-disable-line no-param-reassign
      }

      return this.getClient().post(this.getResourceUrl(), data).then(function (response) {
        var model = new _this.constructor.model(response.data);

        if (cb) {
          return cb(null, model);
        }
        return model;
      }).catch(function (error) {
        return Resource.errorHandler(error.response, cb);
      });
    }

    /**
     * Get a resource by ID
     * @param {number} id
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.0.0
     */

  }, {
    key: 'get',
    value: function get$$1(id, params, cb) {
      var _this2 = this;

      if (typeof params === 'function') {
        cb = params; // eslint-disable-line no-param-reassign
      }

      return this.getClient().get(this.getResourceUrl() + '/' + id, { params: params }).then(function (response) {
        var model = new _this2.constructor.model(response.data);

        if (cb) {
          return cb(null, model);
        }
        return model;
      }).catch(function (error) {
        return Resource.errorHandler(error.response, cb);
      });
    }

    /**
     * Get all resources
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.0.0
     */

  }, {
    key: 'all',
    value: function all(params, cb) {
      var _this3 = this;

      if (typeof params === 'function') {
        cb = params; // eslint-disable-line no-param-reassign
      }

      return this.getClient().get(this.getResourceUrl(), { params: params }).then(function (response) {
        var _response$data = response.data,
            _embedded = _response$data._embedded,
            _response$data$_links = _response$data._links,
            _links = _response$data$_links === undefined ? [] : _response$data$_links;

        var resources = _embedded[_this3.getResourceName()];
        var list = new List();
        list.links = _links;
        list.push.apply(list, toConsumableArray(resources.map(function (resource) {
          return new _this3.constructor.model(resource);
        })));

        if (cb) {
          return cb(null, list);
        }
        return list;
      }).catch(function (error) {
        return Resource.errorHandler(error.response, cb);
      });
    }

    /**
     * Update a resource by ID
     * @param {number} id
     * @param {Object} [data]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.0.0
     */

  }, {
    key: 'update',
    value: function update(id, data, cb) {
      var _this4 = this;

      if (typeof data === 'function') {
        cb = data; // eslint-disable-line no-param-reassign
      }

      return this.getClient().post(this.getResourceUrl() + '/' + id, data).then(function (response) {
        var model = new _this4.constructor.model(response.data);

        if (cb) {
          return cb(null, model);
        }
        return model;
      }).catch(function (error) {
        return Resource.errorHandler(error.response, cb);
      });
    }

    /**
     * Delete a resource by ID
     * @param {number} id
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.0.0
     */

  }, {
    key: 'delete',
    value: function _delete(id, cb) {
      var _this5 = this;

      return this.getClient().delete(this.getResourceUrl() + '/' + id).then(function (response) {
        var model = new _this5.constructor.model(response.data);

        if (cb) {
          return cb(null, model);
        }
        return model;
      }).catch(function (error) {
        return Resource.errorHandler(error.response, cb);
      });
    }
  }], [{
    key: 'errorHandler',
    value: function errorHandler(response, cb) {
      var error = response && response.data || response;

      if (cb) {
        return cb(error);
      }
      throw error;
    }
  }]);
  return Resource;
}();

/**
 * Base model
 */

var Model = function () {
  function Model() {
    classCallCheck(this, Model);
  }

  createClass(Model, [{
    key: 'toPlainObject',

    /**
     * Converts a model into a plain object
     * @returns {Object}
     */
    value: function toPlainObject() {
      return _toPlainObject(this);
    }
  }]);
  return Model;
}();

/**
 * The `Payment` model
 */

var Payment = function (_Model) {
  inherits(Payment, _Model);

  function Payment(props) {
    classCallCheck(this, Payment);

    var _this = possibleConstructorReturn(this, (Payment.__proto__ || Object.getPrototypeOf(Payment)).call(this, props));

    var defaults$$1 = {
      resource: 'payment',
      id: null,
      mode: null,
      createdAt: null,
      status: null,
      isCancelable: null,
      paidAt: null,
      canceledAt: null,
      expiresAt: null,
      expiredAt: null,
      failedAt: null,
      amount: {
        value: null,
        currency: null
      },
      amountRefunded: null,
      amountRemaining: null,
      description: null,
      redirectUrl: null,
      webhookUrl: null,
      method: null,
      metadata: null,
      locale: null,
      countryCode: null,
      profileId: null,
      settlementAmount: null,
      settlementId: null,
      customerId: null,
      sequenceType: null,
      mandateId: null,
      subscriptionId: null,
      applicationFee: {
        amount: {
          value: null,
          currency: null
        },
        description: null
      },
      details: null,
      _links: {
        checkout: null,
        refunds: null,
        chargebacks: null,
        settlement: null,
        mandate: null,
        subscription: null,
        customer: null
      }
    };

    Object.assign(_this, defaults$$1, props);
    return _this;
  }

  /**
   * If the payment is open
   * @returns {boolean}
   */


  createClass(Payment, [{
    key: 'isOpen',
    value: function isOpen() {
      return this.status === Payment.STATUS_OPEN;
    }

    /**
     * If the payment is paid
     * @returns {boolean}
     */

  }, {
    key: 'isPaid',
    value: function isPaid() {
      return !!this.paidAt;
    }

    /**
     * If the payment is canceled
     * @returns {boolean}
     */

  }, {
    key: 'isCanceled',
    value: function isCanceled() {
      return !!this.canceledAt;
    }

    /**
     * If the payment is expired
     * @returns {boolean}
     */

  }, {
    key: 'isExpired',
    value: function isExpired() {
      return !!this.expiredAt;
    }

    /**
     * If the payment is refundable
     * @returns {boolean}
     * @since 2.0.0-rc.2
     */

  }, {
    key: 'isRefundable',
    value: function isRefundable() {
      return this.amountRemaining !== null;
    }

    /**
     * Get the payment URL
     * @returns {string|null}
     */

  }, {
    key: 'getPaymentUrl',
    value: function getPaymentUrl() {
      return this._links && this._links.checkout && this._links.checkout.href;
    }
  }]);
  return Payment;
}(Model);

Payment.STATUS_OPEN = 'open';
Payment.STATUS_PENDING = 'pending';
Payment.STATUS_CANCELED = 'canceled';
Payment.STATUS_EXPIRED = 'expired';
Payment.STATUS_PAID = 'paid';
Payment.STATUS_FAILED = 'failed';
Payment.SEQUENCETYPE_ONEOFF = 'oneoff';
Payment.SEQUENCETYPE_FIRST = 'first';
Payment.SEQUENCETYPE_RECURRING = 'recurring';

/**
 * The `payments` resource
 * @static {string} resource
 * @static {Object} model
 * @since 1.0.0
 */

var Payments = function (_Resource) {
  inherits(Payments, _Resource);

  function Payments() {
    classCallCheck(this, Payments);
    return possibleConstructorReturn(this, (Payments.__proto__ || Object.getPrototypeOf(Payments)).apply(this, arguments));
  }

  return Payments;
}(Resource);

Payments.resource = 'payments';
Payments.model = Payment;

/**
 * Payments base resource
 * @private
 */

var PaymentsResource = function (_Resource) {
  inherits(PaymentsResource, _Resource);

  function PaymentsResource() {
    classCallCheck(this, PaymentsResource);
    return possibleConstructorReturn(this, (PaymentsResource.__proto__ || Object.getPrototypeOf(PaymentsResource)).apply(this, arguments));
  }

  createClass(PaymentsResource, [{
    key: 'setParent',

    /**
     * Set the parent
     * @param {Object} params
     * @since 2.0.0
     */
    value: function setParent() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (!params.paymentId && !this.hasParentId()) {
        throw TypeError('Missing parameter "paymentId".');
      } else if (params.paymentId) {
        this.setParentId(params.paymentId);
      }
    }
  }]);
  return PaymentsResource;
}(Resource);

/**
 * The `Refund` model
 */

var Refund = function (_Model) {
  inherits(Refund, _Model);

  function Refund(props) {
    classCallCheck(this, Refund);

    var _this = possibleConstructorReturn(this, (Refund.__proto__ || Object.getPrototypeOf(Refund)).call(this, props));

    var defaults$$1 = {
      resource: 'refund',
      id: null,
      amount: {
        currency: null,
        value: null
      },
      settlementAmount: null,
      description: null,
      status: null,
      createdAt: null,
      paymentId: null,
      _links: {
        payment: null,
        settlement: null
      }
    };

    Object.assign(_this, defaults$$1, props);
    return _this;
  }

  /**
   * The refund is queued until there is enough balance to process te refund. You can still cancel
   * the refund.
   * @returns {boolean}
   */


  createClass(Refund, [{
    key: 'isQueued',
    value: function isQueued() {
      return this.status === Refund.STATUS_QUEUED;
    }

    /**
     * The refund will be sent to the bank on the next business day. You can still cancel the refund.
     * @returns {boolean}
     */

  }, {
    key: 'isPending',
    value: function isPending() {
      return this.status === Refund.STATUS_PENDING;
    }

    /**
     * The refund has been sent to the bank. The refund amount will be transferred to the consumer
     * account as soon as possible.
     * @returns {boolean}
     */

  }, {
    key: 'isProcessing',
    value: function isProcessing() {
      return this.status === Refund.STATUS_PROCESSING;
    }

    /**
     * The refund amount has been transferred to the consumer.
     * @returns {boolean}
     */

  }, {
    key: 'isRefunded',
    value: function isRefunded() {
      return this.status === Refund.STATUS_REFUNDED;
    }

    /**
     * The refund has failed during processing.
     * @returns {boolean}
     */

  }, {
    key: 'isFailed',
    value: function isFailed() {
      return this.status === Refund.STATUS_FAILED;
    }
  }]);
  return Refund;
}(Model);

Refund.STATUS_QUEUED = 'queued';
Refund.STATUS_PENDING = 'pending';
Refund.STATUS_PROCESSING = 'processing';
Refund.STATUS_REFUNDED = 'refunded';
Refund.STATUS_FAILED = 'failed';

/**
 * The `payments_refunds` resource
 * @static {string} resource
 * @static {Object} model
 * @since 1.1.1
 */

var PaymentsRefunds = function (_PaymentsResource) {
  inherits(PaymentsRefunds, _PaymentsResource);

  function PaymentsRefunds() {
    classCallCheck(this, PaymentsRefunds);
    return possibleConstructorReturn(this, (PaymentsRefunds.__proto__ || Object.getPrototypeOf(PaymentsRefunds)).apply(this, arguments));
  }

  createClass(PaymentsRefunds, [{
    key: 'create',


    /**
     * Create a payment refund
     * @param {Object} [data]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.1.1
     */
    value: function create(data, cb) {
      this.setParent(data);

      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
        data = omit(data, 'paymentId'); // eslint-disable-line no-param-reassign
      }

      return get(PaymentsRefunds.prototype.__proto__ || Object.getPrototypeOf(PaymentsRefunds.prototype), 'create', this).call(this, data, cb);
    }

    /**
     * Get a payment refund by ID
     * @param {number} id
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.1.1
     */

  }, {
    key: 'get',
    value: function get$$1(id, params, cb) {
      this.setParent(params);

      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
        params = omit(params, 'paymentId'); // eslint-disable-line no-param-reassign
      }

      return get(PaymentsRefunds.prototype.__proto__ || Object.getPrototypeOf(PaymentsRefunds.prototype), 'get', this).call(this, id, params, cb);
    }

    /**
     * Get all payment refunds
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.1.1
     */

  }, {
    key: 'all',
    value: function all(params, cb) {
      this.setParent(params);

      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
        params = omit(params, 'paymentId'); // eslint-disable-line no-param-reassign
      }

      return get(PaymentsRefunds.prototype.__proto__ || Object.getPrototypeOf(PaymentsRefunds.prototype), 'all', this).call(this, params, cb);
    }

    /**
     * Delete a payment_refund by ID
     * @param {number} id
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.1.1
     */

  }, {
    key: 'delete',
    value: function _delete(id, params, cb) {
      if (typeof params === 'function') {
        cb = params; // eslint-disable-line no-param-reassign
      }

      this.setParent(params);

      return get(PaymentsRefunds.prototype.__proto__ || Object.getPrototypeOf(PaymentsRefunds.prototype), 'delete', this).call(this, id, cb);
    }

    /**
     * Alias for delete
     * @since 1.3.2
     */

  }, {
    key: 'cancel',
    value: function cancel() {
      return this.delete.apply(this, arguments);
    }
  }]);
  return PaymentsRefunds;
}(PaymentsResource);

PaymentsRefunds.resource = 'payments_refunds';
PaymentsRefunds.model = Refund;

/**
 * The `Method` model
 */

var Method = function (_Model) {
  inherits(Method, _Model);

  function Method(props) {
    classCallCheck(this, Method);

    var _this = possibleConstructorReturn(this, (Method.__proto__ || Object.getPrototypeOf(Method)).call(this, props));

    var defaults$$1 = {
      resource: 'method',
      id: null,
      description: null,
      image: {
        size1x: null,
        size2x: null
      }
    };

    Object.assign(_this, defaults$$1, props);
    return _this;
  }

  /**
   * @param size
   * @returns {string|null}
   */


  createClass(Method, [{
    key: 'getImage',
    value: function getImage() {
      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '2x';

      return this.image && (size === '1x' ? this.image.size1x : this.image.size2x);
    }
  }]);
  return Method;
}(Model);

Method.IDEAL = 'ideal';
Method.CREDITCARD = 'creditcard';
Method.BANCONTACT = 'bancontact';
Method.SOFORT = 'sofort';
Method.BANKTRANSFER = 'banktransfer';
Method.DIRECTDEBIT = 'directdebit';
Method.BITCOIN = 'bitcoin';
Method.PAYPAL = 'paypal';
Method.BELFIUS = 'belfius';
Method.PAYSAFECARD = 'paysafecard';
Method.PODIUMCADEAUKAART = 'podiumcadeaukaart';
Method.KBC = 'kbc';
Method.GIFTCARD = 'giftcard';
Method.INGHOMEPAY = 'inghomepay';

/**
 * The `methods` resource
 * @static {string} resource
 * @static {Object} model
 * @since 1.0.0
 */

var Methods = function (_Resource) {
  inherits(Methods, _Resource);

  function Methods() {
    classCallCheck(this, Methods);
    return possibleConstructorReturn(this, (Methods.__proto__ || Object.getPrototypeOf(Methods)).apply(this, arguments));
  }

  return Methods;
}(Resource);

Methods.resource = 'methods';
Methods.model = Method;

/**
 * The `refunds` resource
 * @static {string} resource
 * @static {Object} model
 * @since 2.0.0
 */

var Refunds = function (_Resource) {
  inherits(Refunds, _Resource);

  function Refunds() {
    classCallCheck(this, Refunds);
    return possibleConstructorReturn(this, (Refunds.__proto__ || Object.getPrototypeOf(Refunds)).apply(this, arguments));
  }

  return Refunds;
}(Resource);

Refunds.resource = 'refunds';
Refunds.model = Refund;

/**
 * The `Customer` model
 */

var Customer = function (_Model) {
  inherits(Customer, _Model);

  function Customer(props) {
    classCallCheck(this, Customer);

    var _this = possibleConstructorReturn(this, (Customer.__proto__ || Object.getPrototypeOf(Customer)).call(this, props));

    var defaults$$1 = {
      resource: 'customer',
      id: null,
      mode: null,
      name: null,
      email: null,
      locale: null,
      metadata: null,
      recentlyUsedMethods: null,
      createdAt: null
    };

    Object.assign(_this, defaults$$1, props);
    return _this;
  }

  return Customer;
}(Model);

/**
 * The `customers` resource
 * @static {string} resource
 * @static {Object} model
 * @since 1.1.1
 */

var Customers = function (_Resource) {
  inherits(Customers, _Resource);

  function Customers() {
    classCallCheck(this, Customers);
    return possibleConstructorReturn(this, (Customers.__proto__ || Object.getPrototypeOf(Customers)).apply(this, arguments));
  }

  return Customers;
}(Resource);

Customers.resource = 'customers';
Customers.model = Customer;

/**
 * Customers base resource
 * @private
 */

var CustomersResource = function (_Resource) {
  inherits(CustomersResource, _Resource);

  function CustomersResource() {
    classCallCheck(this, CustomersResource);
    return possibleConstructorReturn(this, (CustomersResource.__proto__ || Object.getPrototypeOf(CustomersResource)).apply(this, arguments));
  }

  createClass(CustomersResource, [{
    key: 'setParent',

    /**
     * Set the parent
     * @param {Object} params
     * @since 2.0.0
     */
    value: function setParent() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (!params.customerId && !this.hasParentId()) {
        throw TypeError('Missing parameter "customerId".');
      } else if (params.customerId) {
        this.setParentId(params.customerId);
      }
    }
  }]);
  return CustomersResource;
}(Resource);

/**
 * The `customers_payments` resource
 * @static {string} resource
 * @static {Object} model
 * @since 1.1.1
 */

var CustomersPayments = function (_CustomersResource) {
  inherits(CustomersPayments, _CustomersResource);

  function CustomersPayments() {
    classCallCheck(this, CustomersPayments);
    return possibleConstructorReturn(this, (CustomersPayments.__proto__ || Object.getPrototypeOf(CustomersPayments)).apply(this, arguments));
  }

  createClass(CustomersPayments, [{
    key: 'create',


    /**
     * Create a customer payment
     * @param {Object} [data]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.1.1
     */
    value: function create(data, cb) {
      this.setParent(data);

      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
        data = omit(data, 'customerId'); // eslint-disable-line no-param-reassign
      }

      return get(CustomersPayments.prototype.__proto__ || Object.getPrototypeOf(CustomersPayments.prototype), 'create', this).call(this, data, cb);
    }

    /**
     * Get a customer payment
     * @param {number} id
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.1.1
     */

  }, {
    key: 'get',
    value: function get$$1(id, params, cb) {
      this.setParent(params);

      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
        params = omit(params, 'customerId'); // eslint-disable-line no-param-reassign
      }

      return get(CustomersPayments.prototype.__proto__ || Object.getPrototypeOf(CustomersPayments.prototype), 'get', this).call(this, id, params, cb);
    }

    /**
     * Get all of a customer's payments
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.1.1
     */

  }, {
    key: 'all',
    value: function all(params, cb) {
      this.setParent(params);

      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
        params = omit(params, 'customerId'); // eslint-disable-line no-param-reassign
      }

      return get(CustomersPayments.prototype.__proto__ || Object.getPrototypeOf(CustomersPayments.prototype), 'all', this).call(this, params, cb);
    }
  }]);
  return CustomersPayments;
}(CustomersResource);

CustomersPayments.resource = 'customers_payments';
CustomersPayments.model = Payment;

/**
 * The `Mandate` model
 */

var Mandate = function (_Model) {
  inherits(Mandate, _Model);

  function Mandate(props) {
    classCallCheck(this, Mandate);

    var _this = possibleConstructorReturn(this, (Mandate.__proto__ || Object.getPrototypeOf(Mandate)).call(this, props));

    var defaults$$1 = {
      resource: 'mandate',
      id: null,
      status: null,
      method: null,
      details: null,
      mandateReference: null,
      signatureDate: null,
      createdAt: null,
      _links: {
        customer: null
      }
    };

    Object.assign(_this, defaults$$1, props);
    return _this;
  }

  /**
   * If the mandate is valid
   * @returns {boolean}
   */


  createClass(Mandate, [{
    key: 'isValid',
    value: function isValid() {
      return this.status === Mandate.STATUS_VALID;
    }
  }]);
  return Mandate;
}(Model);

Mandate.STATUS_VALID = 'valid';
Mandate.STATUS_INVALID = 'invalid';

/**
 * The `customers_mandates` resource
 * @static {string} resource
 * @static {Object} model
 * @since 1.2.0
 */

var CustomersMandates = function (_CustomersResource) {
  inherits(CustomersMandates, _CustomersResource);

  function CustomersMandates() {
    classCallCheck(this, CustomersMandates);
    return possibleConstructorReturn(this, (CustomersMandates.__proto__ || Object.getPrototypeOf(CustomersMandates)).apply(this, arguments));
  }

  createClass(CustomersMandates, [{
    key: 'create',


    /**
     * Create a customer mandate
     * @param {Object} [data]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.2.0
     */
    value: function create(data, cb) {
      this.setParent(data);

      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
        data = omit(data, 'customerId'); // eslint-disable-line no-param-reassign
      }

      return get(CustomersMandates.prototype.__proto__ || Object.getPrototypeOf(CustomersMandates.prototype), 'create', this).call(this, data, cb);
    }

    /**
     * Get a customer mandate by ID
     * @param id
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.2.0
     */

  }, {
    key: 'get',
    value: function get$$1(id, params, cb) {
      this.setParent(params);

      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
        params = omit(params, 'customerId'); // eslint-disable-line no-param-reassign
      }

      return get(CustomersMandates.prototype.__proto__ || Object.getPrototypeOf(CustomersMandates.prototype), 'get', this).call(this, id, params, cb);
    }

    /**
     * Get all of a customer's mandates
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.2.0
     */

  }, {
    key: 'all',
    value: function all(params, cb) {
      this.setParent(params);

      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
        params = omit(params, 'customerId'); // eslint-disable-line no-param-reassign
      }

      return get(CustomersMandates.prototype.__proto__ || Object.getPrototypeOf(CustomersMandates.prototype), 'all', this).call(this, params, cb);
    }

    /**
     * Delete a customer subscription
     * @param id
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 2.0.0
     */

  }, {
    key: 'delete',
    value: function _delete(id, params, cb) {
      if (typeof params === 'function') {
        cb = params; // eslint-disable-line no-param-reassign
      }

      this.setParent(params);
      return get(CustomersMandates.prototype.__proto__ || Object.getPrototypeOf(CustomersMandates.prototype), 'delete', this).call(this, id, cb);
    }

    /**
     * Alias for delete
     * @since 1.3.2
     */

  }, {
    key: 'cancel',
    value: function cancel() {
      return this.delete.apply(this, arguments);
    }

    /**
     * Alias of delete
     * @since 2.0.0
     */

  }, {
    key: 'revoke',
    value: function revoke() {
      return this.delete.apply(this, arguments);
    }
  }]);
  return CustomersMandates;
}(CustomersResource);

CustomersMandates.resource = 'customers_mandates';
CustomersMandates.model = Mandate;

/**
 * The `Subscription` model
 */

var Subscription = function (_Model) {
  inherits(Subscription, _Model);

  function Subscription(props) {
    classCallCheck(this, Subscription);

    var _this = possibleConstructorReturn(this, (Subscription.__proto__ || Object.getPrototypeOf(Subscription)).call(this, props));

    var defaults$$1 = {
      resource: 'subscription',
      id: null,
      mode: null,
      createdAt: null,
      status: null,
      amount: {
        currency: null,
        value: null
      },
      times: null,
      interval: null,
      startDate: null,
      description: null,
      method: null,
      canceledAt: null,
      webhookUrl: null,
      _links: {
        customer: null
      }
    };

    Object.assign(_this, defaults$$1, props);
    return _this;
  }

  /**
   * Get the webhook url
   * @returns {boolean|string}
   */
  // Active, but mandate became invalid.
  // Waiting for a valid mandate.


  createClass(Subscription, [{
    key: 'getWebhookUrl',
    value: function getWebhookUrl() {
      return this.webhookUrl;
    }

    /**
     * If the subscription is active
     * @returns {boolean}
     */

  }, {
    key: 'isActive',
    value: function isActive() {
      return this.status === Subscription.STATUS_ACTIVE;
    }

    /**
     * If the subscription is pending
     * @returns {boolean}
     */

  }, {
    key: 'isPending',
    value: function isPending() {
      return this.status === Subscription.STATUS_PENDING;
    }

    /**
     * If the subscription is completed
     * @returns {boolean}
     */

  }, {
    key: 'isCompleted',
    value: function isCompleted() {
      return this.status === Subscription.STATUS_COMPLETED;
    }

    /**
     * If the subscription is suspended
     * @returns {boolean}
     */

  }, {
    key: 'isSuspended',
    value: function isSuspended() {
      return this.status === Subscription.STATUS_SUSPENDED;
    }

    /**
     * If the subscription is canceled
     * @returns {boolean}
     */

  }, {
    key: 'isCanceled',
    value: function isCanceled() {
      return !!this.canceledAt;
    }
  }]);
  return Subscription;
}(Model);

Subscription.STATUS_ACTIVE = 'active';
Subscription.STATUS_PENDING = 'pending';
Subscription.STATUS_CANCELED = 'canceled';
Subscription.STATUS_SUSPENDED = 'suspended';
Subscription.STATUS_COMPLETED = 'completed';

/**
 * The `customers_subscriptions` resource
 * @static {string} resource
 * @static {Object} model
 * @since 1.3.2
 */

var CustomersSubscriptions = function (_CustomersResource) {
  inherits(CustomersSubscriptions, _CustomersResource);

  function CustomersSubscriptions() {
    classCallCheck(this, CustomersSubscriptions);
    return possibleConstructorReturn(this, (CustomersSubscriptions.__proto__ || Object.getPrototypeOf(CustomersSubscriptions)).apply(this, arguments));
  }

  createClass(CustomersSubscriptions, [{
    key: 'create',


    /**
     * Create a customer subscription
     * @param {Object} [data]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.3.2
     */
    value: function create(data, cb) {
      this.setParent(data);

      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
        data = omit(data, 'customerId'); // eslint-disable-line no-param-reassign
      }

      return get(CustomersSubscriptions.prototype.__proto__ || Object.getPrototypeOf(CustomersSubscriptions.prototype), 'create', this).call(this, data, cb);
    }

    /**
     * Get a customer subscription
     * @param id
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.3.2
     */

  }, {
    key: 'get',
    value: function get$$1(id, params, cb) {
      this.setParent(params);

      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
        params = omit(params, 'customerId'); // eslint-disable-line no-param-reassign
      }

      return get(CustomersSubscriptions.prototype.__proto__ || Object.getPrototypeOf(CustomersSubscriptions.prototype), 'get', this).call(this, id, params, cb);
    }

    /**
     * Get all customer's subscriptions
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.3.2
     */

  }, {
    key: 'all',
    value: function all(params, cb) {
      this.setParent(params);

      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
        params = omit(params, 'customerId'); // eslint-disable-line no-param-reassign
      }

      return get(CustomersSubscriptions.prototype.__proto__ || Object.getPrototypeOf(CustomersSubscriptions.prototype), 'all', this).call(this, params, cb);
    }

    /**
     * Delete a customer subscription
     * @param id
     * @param {Object} [params]
     * @param {function} [cb]
     * @returns {Promise.<T>}
     * @since 1.3.2
     */

  }, {
    key: 'delete',
    value: function _delete(id, params, cb) {
      if (typeof params === 'function') {
        cb = params; // eslint-disable-line no-param-reassign
      }

      this.setParent(params);
      return get(CustomersSubscriptions.prototype.__proto__ || Object.getPrototypeOf(CustomersSubscriptions.prototype), 'delete', this).call(this, id, cb);
    }

    /**
     * Alias for delete
     * @since 1.3.2
     */

  }, {
    key: 'cancel',
    value: function cancel(id, params, cb) {
      return this.delete(id, params, cb);
    }
  }]);
  return CustomersSubscriptions;
}(CustomersResource);

CustomersSubscriptions.resource = 'customers_subscriptions';
CustomersSubscriptions.model = Subscription;

/**
 * The `Chargeback` model
 */

var Chargeback = function (_Model) {
  inherits(Chargeback, _Model);

  function Chargeback(props) {
    classCallCheck(this, Chargeback);

    var _this = possibleConstructorReturn(this, (Chargeback.__proto__ || Object.getPrototypeOf(Chargeback)).call(this, props));

    var defaults$$1 = {
      resource: 'chargeback',
      id: null,
      amount: null,
      settlementAmount: null,
      createdAt: null,
      reversedAt: null,
      paymentId: null,
      _links: {
        payment: null,
        settlement: null
      }
    };

    Object.assign(_this, defaults$$1, props);
    return _this;
  }

  return Chargeback;
}(Model);

/**
 * The `chargebacks` resource
 * @static {string} resource
 * @static {Object} model
 * @since 2.0.0-rc.1
 */

var Chargebacks = function (_Resource) {
  inherits(Chargebacks, _Resource);

  function Chargebacks() {
    classCallCheck(this, Chargebacks);
    return possibleConstructorReturn(this, (Chargebacks.__proto__ || Object.getPrototypeOf(Chargebacks)).apply(this, arguments));
  }

  return Chargebacks;
}(Resource);

Chargebacks.resource = 'chargebacks';
Chargebacks.model = Chargeback;

/**
 * Create Mollie API
 * @param {Object} httpClient
 * @returns {Object} available resources
 * @since 2.0.0
 */
function createMollieApi(_ref) {
  var httpClient = _ref.httpClient;

  return {
    payments: new Payments(httpClient),
    payments_refunds: new PaymentsRefunds(httpClient),
    methods: new Methods(httpClient),
    refunds: new Refunds(httpClient),
    customers: new Customers(httpClient),
    customers_payments: new CustomersPayments(httpClient),
    customers_mandates: new CustomersMandates(httpClient),
    customers_subscriptions: new CustomersSubscriptions(httpClient),
    chargebacks: new Chargebacks(httpClient)
  };
}

/**
 * Create Mollie client.
 * @param options
 * @returns {Object} available resources
 * @since 2.0.0
 */
function mollie() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (!options.apiKey) {
    throw new TypeError('Missing parameter "apiKey".');
  }

  var httpClient = createHttpClient(options);

  return createMollieApi({ httpClient: httpClient });
}

module.exports = mollie;
